<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaoyb.dao.EmployeeMapper">
	<resultMap type="com.xiaoyb.domain.Employee" id="WithDeptResultMap">
		<id column="emp_id" jdbcType="INTEGER" property="empId" />
		<result column="emp_name" jdbcType="VARCHAR" property="empName" />
		<result column="emp_gender" jdbcType="CHAR" property="empGender" />
		<result column="emp_email" jdbcType="VARCHAR" property="empEmail" />
		<result column="dep_id" jdbcType="INTEGER" property="depId" />
		<!-- 指定联合查询出的部门字段的封装 -->
		<association property="department" javaType="com.xiaoyb.domain.Department">
			<id column="dep_id" property="depId" />
			<result column="dep_name" property="depName" />
		</association>
	</resultMap>

	<sql id="Base_Column_List">
		emp_id, emp_name, emp_gender, emp_email, dep_id
	</sql>

	<!-- 查询数据库中某个姓名的员工的人数是 -->
	<select id="checkUser" parameterType="java.lang.String"
		resultType="java.lang.Integer">
		select count(emp_id) from employee where emp_name
		=#{empName}
	</select>

	<select id="selectByPrimaryKey" parameterType="java.lang.Integer"
		resultMap="WithDeptResultMap">
		select
		*
		from employee
		where emp_id = #{empId,jdbcType=INTEGER}
	</select>

	<select id="selectByPrimaryKeyWithDep" parameterType="java.lang.Integer"
		resultMap="WithDeptResultMap">
		select
		*
		from employee e,department d
		where e.emp_id =
		#{empId,jdbcType=INTEGER} and e.dep_id=d.dep_id
	</select>

	<!-- 查询出所有员工 -->
	<select id="selectAllEmp" resultMap="WithDeptResultMap">
		select
		*
		from employee
		e,department d where e.dep_id=d.dep_id
	</select>

	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		employee
		where emp_id = #{empId,jdbcType=INTEGER}
	</delete>

	<delete id="batchDeleteEmployee" parameterType="java.util.List">
		DELETE FROM employee WHERE emp_id IN
		<foreach collection="list" index="index" item="item" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<insert id="insert" parameterType="employee">
		insert into employee (emp_id,
		emp_name, emp_gender,
		emp_email, dep_id)
		values
		(#{empId,jdbcType=INTEGER}, #{empName,jdbcType=VARCHAR},
		#{empGender,jdbcType=CHAR},
		#{empEmail,jdbcType=VARCHAR},
		#{depId,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="employee">
		insert into employee
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="empId != null">
				emp_id,
			</if>
			<if test="empName != null">
				emp_name,
			</if>
			<if test="empGender != null">
				emp_gender,
			</if>
			<if test="empEmail != null">
				emp_email,
			</if>
			<if test="depId != null">
				dep_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="empId != null">
				#{empId,jdbcType=INTEGER},
			</if>
			<if test="empName != null">
				#{empName,jdbcType=VARCHAR},
			</if>
			<if test="empGender != null">
				#{empGender,jdbcType=CHAR},
			</if>
			<if test="empEmail != null">
				#{empEmail,jdbcType=VARCHAR},
			</if>
			<if test="depId != null">
				#{depId,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="employee">
		update employee
		<set>
			<if test="empName != null">
				emp_name = #{empName,jdbcType=VARCHAR},
			</if>
			<if test="empGender != null">
				emp_gender = #{empGender,jdbcType=CHAR},
			</if>
			<if test="empEmail != null">
				emp_email = #{empEmail,jdbcType=VARCHAR},
			</if>
			<if test="depId != null">
				dep_id = #{depId,jdbcType=INTEGER},
			</if>
		</set>
		where emp_id = #{empId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="employee">
		update employee
		set emp_name = #{empName,jdbcType=VARCHAR},
		emp_gender =
		#{empGender,jdbcType=CHAR},
		emp_email = #{empEmail,jdbcType=VARCHAR},
		dep_id = #{depId,jdbcType=INTEGER}
		where emp_id =
		#{empId,jdbcType=INTEGER}
	</update>
</mapper>